Lesson 2:

Reflect: Initialising a repository
Q: What happens when you initialize a repository? Why do you need to do it?
   It creates a git repository where changes in repository will be tracked. The repository needs to be initialised
   to create all the meta files inside the directory, which does the work of tracking and keeping version control.

Reflect: Staging area
Q: How is the staging area different from the working directory and the repository? What value do you think it offers?
   The staging area is a part of the working directory to be considered for a commit. This gives developers additional
   control on which part of the working directory is currently being worked on. Therefore, within a large
   project, the developers can see easier which files are being worked on.
   
Reflect: Commit size
Q: How can you use the staging area to make sure you have one commit per logical change?
   The staging area can be used to see what changes have been done to what files before they are being committed.
   This means that I can see what changes are within one logical change, instead of committing them wholesale.

Reflect: When to use branches
Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
   When we want to add experimental features, which might be buggy or breaks the current project. Or when we want to
   add localisation features, or other features, where changing the main features is the easiest way to see what
   the changes will do.

Reflect: Visualizing with Diagrams
Q: How do the diagrams help you visualize the branch structure?
   Diagrams can show the branches and how they relate to each other. The most important thing is to see the parents of
   the branches to visualise where the HEAD is and what to work on.

Reflect: Merging Two branches
Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
   The result is to create a single branch which includes all of the changes committed since they diverged
   from the original parent. They are represented in a way to show the parents, and also to show the changes applied
   on each branch.

Reflect: Automatic vs. Manual Merging
Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
   The pros are the ability of quickly merging two features into the same branch. The cons is that sometime there would
   be conflicts, due to the similarities and uncertainties in the two branches. Doing merges manually are very
   time consuming, but can be precise, and can capture the intents better.